[
  {
    "objectID": "blog.html",
    "href": "blog.html",
    "title": "GeoViews Exposition",
    "section": "",
    "text": "GeoViews Exposition\n\n\n\n\n\n\n\n\n\n\n\nFeb 25, 2025\n\n\nBhavy Mishra, Chirag Mahale, Parth Kale\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/Exposition_Blog.html",
    "href": "posts/Exposition_Blog.html",
    "title": "GeoViews Exposition",
    "section": "",
    "text": "GeoViews in Python\n\n\n\nIntroduction\nGeoViews is a powerful Python library for visualizing geographic data interactively. Built on top of HoloViews and Bokeh, it allows you to create stunning maps with minimal code.\nUnlike traditional mapping tools, GeoViews integrates seamlessly with Pandas and Xarray, making it easy to work with geospatial datasets. Whether you’re plotting earthquake locations, climate data, or population trends, GeoViews helps you visualize and explore spatial patterns effortlessly.\n\n\nInstallation & Setup\nBefore installing GeoViews, it’s recommended to create a virtual environment to keep dependencies organized.\n\nInstalling GeoViews\n\nGeoViews can be installed via pip or conda depending on your preference\nSince GeoViews relies on HoloViews, Cartopy, and Bokeh, it’s a good practice to install them explicitly:\n!pip install geoviews\n\nVerifying Installation\n\n\nimport geoviews as gv\nprint(gv.__version__)\n\n1.14.0\n\n\n\nEnabling GeoViews in Jupyter Notebook\n\nIf you’re using Jupyter Notebook, enable GeoViews with the following command:\n\nimport geoviews as gv\ngv.extension('bokeh')\n\n\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\n\n  \n  \n\n\n\n\n\n\n\n\nImporting each library required:\n\n\nimport numpy as np\nimport xarray as xr\nimport holoviews as hv\nimport geoviews as gv\nimport geoviews.feature as gf\nimport cartopy as crs\n\nfrom geoviews import opts\nfrom cartopy import crs as ccrs\n\ngv.extension('matplotlib', 'bokeh')\ngv.extension(\"bokeh\")\n\ngv.output(size=200)\n\n\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\n\n  \n  \n\n\n  \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nKey Features\n\n\n1) Multiple Geographic Projections\nGeoViews supports multiple map projections, including Mercator, Robinson, and Plate Carrée, making it adaptable for various mapping needs. Changing projections is simple—just specify the desired projection, and GeoViews handles the rest.\nFor example, to switch to the Robinson projection, you can use gv.tile_sources.EsriImagery.opts(projection=ccrs.Robinson()). This flexibility allows for better representation of global datasets, minimizing distortions based on your analysis needs. Now, let’s see it in action!”\n\n# Create a world map with Robinson projection\ngv.tile_sources.EsriImagery.opts(projection=ccrs.Robinson(), width=600, height=400)\n\n\n\n\n\n  \n\n\n\n\n\nLayering Multiple Geographic Features\n\nGeoViews allows you to overlay multiple map elements, such as land, oceans, rivers, and borders, to create detailed geographic visualizations with ease\n\nfeatures = gv.Overlay([gf.ocean, gf.land, gf.rivers, gf.lakes, gf.borders, gf.coastline])\n\ngv.output(features, backend='matplotlib', fig='svg', size=300)\n\n\n\n\n\n\n\nCode Examples\nA)(i) Interactive Mapping with GeoViews\nGeoViews enables seamless integration with interactive tile maps, allowing users to visualize geospatial data dynamically.\n\nCustomizable Point Visualization\n\nThis example plots data points with different sizes and colors based on magnitude, using an OSM basemap and interactive hover tools for better insight\n\nimport geoviews as gv\nimport geoviews.tile_sources as gts\nimport cartopy.crs as ccrs\nimport pandas as pd\n\ngv.extension('bokeh')\n\n# Define city coordinates\ncities = pd.DataFrame({\n    'City': ['Delhi', 'Mumbai', 'Chennai', 'Kolkata'],\n    'Longitude': [77.1025, 72.8777, 80.2707, 88.3639],\n    'Latitude': [28.7041, 19.0760, 13.0827, 22.5726]\n})\n\n# Create points for the cities\npoints = gv.Points(cities, ['Longitude', 'Latitude'], 'City', crs=ccrs.PlateCarree()).opts(\n    size=10, color='red', tools=['hover']\n)\n\n# Create a path connecting the cities\nroute = gv.Path([list(zip(cities['Longitude'], cities['Latitude']))], crs=ccrs.PlateCarree()).opts(\n    color='blue', linewidth=2\n)\n\n# Use the correct Esri satellite imagery\nsatellite_map = gts.EsriImagery * route * points\nsatellite_map.opts(width=800, height=500, title=\"Satellite Map of India with Connected Cities\")\n\n\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\n\n  \n  \n\n\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\nInteractive Maps with Scaled Data Points\n\nGeoViews allows you to plot points with varying sizes and colors based on data values, making it easy to visualize intensity or magnitude differences across locations\n\nimport geoviews as gv\nimport geoviews.tile_sources as gts\n\ngv.extension('bokeh')\n\n# Sample data (random points)\nlongitudes = [-100, -50, 0, 50, 100]\nlatitudes = [40, 10, 0, -10, -40]\nmagnitudes = [2, 4, 6, 8, 10]  # Example sizes\n\n# Create interactive map with points\npoints = gv.Points((longitudes, latitudes, magnitudes), vdims=\"Magnitude\")\n\ninteractive_map = gts.EsriImagery * points.opts(color='Magnitude', cmap='reds', tools=['hover'], size=gv.dim('Magnitude')*3)\n\ninteractive_map.opts(width=800, height=500, title=\"Interactive Map with Points\")\n\n\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\n\n  \n  \n\n\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\nB)(i) Interactive Data set Visualization\nGeoViews and HoloViews enable dynamic mapping of global data, allowing users to explore earthquake intensities interactively with color-coded magnitude representation.\n\nSeamless Geographic Integration\n\nThis visualization overlays data locations on an OpenStreetMap (OSM) basemap, using GeoViews’ powerful spatial mapping capabilities to enhance geospatial analysis.\n\nimport pandas as pd\nimport geoviews as gv\nimport holoviews as hv\nfrom holoviews import opts\nfrom cartopy import crs as ccrs\nfrom bokeh.models import ColorBar\n\n# Enable GeoViews and HoloViews extensions\ngv.extension('bokeh')\n\n# Load the earthquake dataset\nfile_path = '2.5_month.csv'  # Adjust the path if necessary\ndata = pd.read_csv(file_path)\n\n# Filter relevant columns: latitude, longitude, and magnitude\ndata = data[['latitude', 'longitude', 'mag']].dropna()\n\n# Create a GeoViews Points object for the earthquake locations\npoints = gv.Points(data, kdims=['longitude', 'latitude'], vdims=['mag'], crs=ccrs.PlateCarree())\n\n# Define options for the plot with properly labeled color bar\npoints = points.opts(\n    color='mag',  # Use magnitude for color intensity\n    cmap='viridis',  # 'viridis' gives clear intensity contrast (Blue=Low, Yellow=High)\n    colorbar=True,\n    colorbar_opts={'title': 'Earthquake Magnitude'},  # Correct way to label the color bar\n    size=8,  # Adjust size of points based on magnitude if needed\n    tools=['hover'],  # Add hover tool for interactivity\n    title='Earthquake Intensities',\n    width=800,\n    height=400,\n)\n\n# Add a basemap (OpenStreetMap)\ntiles = gv.tile_sources.EsriImagery\n\n# Combine the basemap with the earthquake points\nvisualization = tiles * points\n\n# Display the visualization\nvisualization\n\n\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\n\n  \n  \n\n\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\nC)(i) Interactive Climate Data Visualization\nGeoViews and HoloViews enable dynamic exploration of geospatial climate data, allowing users to interact with surface temperature variations over time using a slider.\n\nSeamless Xarray Integration\n\nThis example leverages Xarray datasets to efficiently handle multi-dimensional climate data and render it as an interactive heatmap overlaid with coastlines.\n\nimport panel as pn\nimport logging\n\ngv.extension('bokeh')\nhv.extension('bokeh')\nlogging.getLogger(\"param\").setLevel(logging.ERROR)\nlogging.getLogger(\"bokeh\").setLevel(logging.ERROR)\n\ngeo_dims = ['longitude', 'latitude']\n\nxr_ensembles = xr.open_dataset('ensemble.nc')\n\n\ntime_values = list(xr_ensembles.time.values)\ntime_slider = pn.widgets.DiscreteSlider(name=\"Time\", options=time_values, value=time_values[0])\n\ndef plot_surface_temperature(value):\n    xr_single_time = xr_ensembles.sel(time=value)\n\n    dataset = gv.Dataset(xr_single_time, kdims=geo_dims, vdims='surface_temperature')\n\n    image = dataset.to(gv.Image, geo_dims).opts(\n        width=1000, height=600, colorbar=True, cmap='viridis', tools=['hover']\n    )\n\n    return image * gf.coastline.opts(line_width=1)\n\ndynamic_map = hv.DynamicMap(plot_surface_temperature, streams=[hv.streams.Params(time_slider, ['value'])])\n\npn.Row(time_slider, dynamic_map).servable()\n\n\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\n\n  \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nC:\\Users\\hp\\AppData\\Local\\Temp\\ipykernel_4592\\225242091.py:11: FutureWarning: In a future version of xarray decode_timedelta will default to False rather than None. To silence this warning, set decode_timedelta to True, False, or a 'CFTimedeltaCoder' instance.\n  xr_ensembles = xr.open_dataset('ensemble.nc')\n\n\n\n\n\n\n\nUse Cases\n\nVisualizing Earthquake Data\n\nGeoViews allows mapping of earthquake locations using real-world coordinates.\nYou can visualize earthquake magnitudes with color-coded points to identify high-risk zones.\n\nTracking Climate Change\n\nDisplay temperature variations across the world using heatmaps.\nInteractive time sliders help analyze trends in global warming over different years.\n\nMapping Population Density\n\nUse choropleth maps to highlight population density across cities and countries.\nHelps urban planners allocate resources and design infrastructure effectively.\n\nStudying Wildlife Migration\n\nTrack seasonal migration of birds and animals using GPS location data.\nConservationists can analyze movement patterns to protect endangered species.\n\nMonitoring Traffic & Transport\n\nMap real-time traffic congestion and transportation routes in urban areas.\nAirlines and shipping companies can visualize flight paths and cargo movement.\nThere are also other practical use cases of GeoViews but we have only included a few of them here.\n\n\nConclusion\nGeoViews is a fantastic tool for creating interactive geographical visualizations with ease. By following this guide, you should now have GeoViews installed and ready to use. With its support for multiple backends and seamless integration with HoloViews, it’s a great choice for spatial data analysis and visualization.\n\n\nReferences & Further Reading\nGeoViews Documentation: https://geoviews.org/index.html\nHoloViews Documentation: https://holoviews.org/user_guide"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "GeoViews Exposition",
    "section": "",
    "text": "GeoViews is here!!"
  }
]